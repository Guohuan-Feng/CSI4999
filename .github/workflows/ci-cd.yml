name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Install AWS CLI
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-2

      # Set up SSH for EC2 Deployment
      - name: Create SSH Private Key File
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > /tmp/EC2_SSH_KEY.pem
          chmod 600 /tmp/EC2_SSH_KEY.pem

      - name: Debug SSH Key File (Optional)
        run: |
          ls -l /tmp/EC2_SSH_KEY.pem
          file /tmp/EC2_SSH_KEY.pem
          wc -l /tmp/EC2_SSH_KEY.pem

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/EC2_SSH_KEY.pem admin@18.117.181.101 "echo 'SSH Connection Successful'" || exit 1

      # Deploy to EC2 (Without SSM)
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/EC2_SSH_KEY.pem admin@18.117.181.101 << 'EOF'
          set -e  # Stop execution if any command fails

          # Remove SSM repo if it exists (Cleanup)
          sudo rm -f /etc/apt/sources.list.d/amazon-ssm-agent.list

          # Update and install required dependencies
          sudo apt update || true
          sudo apt install -y nodejs npm postgresql postgresql-contrib nginx

          # Ensure PostgreSQL is running
          sudo systemctl start postgresql
          sudo systemctl enable postgresql

          # Set up PostgreSQL User & Database
          sudo -u postgres psql -c "CREATE USER myuser WITH PASSWORD 'mypassword';"
          sudo -u postgres psql -c "CREATE DATABASE mydatabase OWNER myuser;"
          sudo -u postgres psql -c "ALTER ROLE myuser SUPERUSER;"

          # Ensure correct file ownership and deploy code
          sudo chown -R admin:admin /var/www/html
          cd /var/www/html
          sudo git reset --hard HEAD
          sudo git pull origin main
          npm install
          npm run migrate  # If applicable
          npm run start  # Modify if using PM2

          # Deploy Static HTML (If applicable)
          sudo cp -r /var/www/html/frontend/* /var/www/html/public/

          # Restart NGINX
          sudo systemctl restart nginx

          echo "Deployment successful!"
          EOF
